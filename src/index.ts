import { app, BrowserWindow } from 'electron';
import { access } from 'fs/promises';
import { setConfigIpcHandlers } from './api/config';
import { configPath } from './api/config/defaultConfig';
import initializeConfig from './api/config/functions/common/initializeConfig';
import { setStartupIpcHandlers } from './api/startup';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
// eslint-disable-next-line global-require
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      scrollBounce: true,
    },
    titleBarStyle: 'hiddenInset',
    minHeight: 350,
    minWidth: 500,
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// database ipc handlers set in initializeDatabase
setConfigIpcHandlers();
setStartupIpcHandlers();

(async () => {
  try {
    await access(configPath);
  } catch {
    initializeConfig();
  }

  await app.whenReady();

  createWindow();
})();
